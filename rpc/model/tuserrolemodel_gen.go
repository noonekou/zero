// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tUserRoleFieldNames          = builder.RawFieldNames(&TUserRole{}, true)
	tUserRoleRows                = strings.Join(tUserRoleFieldNames, ",")
	tUserRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(tUserRoleFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tUserRoleRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tUserRoleFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	tUserRoleModel interface {
		Insert(ctx context.Context, data *TUserRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TUserRole, error)
		FindOneByUserIdRoleId(ctx context.Context, userId int64, roleId int64) (*TUserRole, error)
		Update(ctx context.Context, data *TUserRole) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTUserRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TUserRole struct {
		Id        int64     `db:"id"`         // 用户角色ID
		UserId    int64     `db:"user_id"`    // 用户ID
		RoleId    int64     `db:"role_id"`    // 角色ID
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newTUserRoleModel(conn sqlx.SqlConn) *defaultTUserRoleModel {
	return &defaultTUserRoleModel{
		conn:  conn,
		table: `"public"."t_user_role"`,
	}
}

func (m *defaultTUserRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTUserRoleModel) FindOne(ctx context.Context, id int64) (*TUserRole, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tUserRoleRows, m.table)
	var resp TUserRole
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserRoleModel) FindOneByUserIdRoleId(ctx context.Context, userId int64, roleId int64) (*TUserRole, error) {
	var resp TUserRole
	query := fmt.Sprintf("select %s from %s where user_id = $1 and role_id = $2 limit 1", tUserRoleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, roleId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserRoleModel) Insert(ctx context.Context, data *TUserRole) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, tUserRoleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.RoleId)
	return ret, err
}

func (m *defaultTUserRoleModel) Update(ctx context.Context, newData *TUserRole) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, tUserRoleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.UserId, newData.RoleId)
	return err
}

func (m *defaultTUserRoleModel) tableName() string {
	return m.table
}
