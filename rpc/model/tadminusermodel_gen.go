// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tAdminUserFieldNames          = builder.RawFieldNames(&TAdminUser{}, true)
	tAdminUserRows                = strings.Join(tAdminUserFieldNames, ",")
	tAdminUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tAdminUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tAdminUserRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tAdminUserFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	tAdminUserModel interface {
		Insert(ctx context.Context, data *TAdminUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TAdminUser, error)
		FindOneByUsername(ctx context.Context, username string) (*TAdminUser, error)
		FindOneByUsernameAndPassword(ctx context.Context, username, password string) (*TAdminUser, error)
		Update(ctx context.Context, data *TAdminUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTAdminUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TAdminUser struct {
		Id        int64     `db:"id"`         // 用户ID
		Username  string    `db:"username"`   // 用户名
		Password  string    `db:"password"`   // 密码hash
		Nickname  string    `db:"nickname"`   // 昵称
		Avatar    string    `db:"avatar"`     // 头像
		Email     string    `db:"email"`      // 邮箱
		Phone     string    `db:"phone"`      // 手机号
		Status    int64     `db:"status"`     // 状态(1:正常 0:禁用)
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newTAdminUserModel(conn sqlx.SqlConn) *defaultTAdminUserModel {
	return &defaultTAdminUserModel{
		conn:  conn,
		table: `"public"."t_admin_user"`,
	}
}

func (m *defaultTAdminUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTAdminUserModel) FindOne(ctx context.Context, id int64) (*TAdminUser, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tAdminUserRows, m.table)
	var resp TAdminUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTAdminUserModel) FindOneByUsername(ctx context.Context, username string) (*TAdminUser, error) {
	var resp TAdminUser
	query := fmt.Sprintf("select %s from %s where username = $1 limit 1", tAdminUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTAdminUserModel) FindOneByUsernameAndPassword(ctx context.Context, username, password string) (*TAdminUser, error) {
	var resp TAdminUser
	query := fmt.Sprintf("select %s from %s where username = $1 and password = $2 limit 1", tAdminUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username, password)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTAdminUserModel) Insert(ctx context.Context, data *TAdminUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7) returning id", m.table, tAdminUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Password, data.Nickname, data.Avatar, data.Email, data.Phone, data.Status)
	return ret, err
}

func (m *defaultTAdminUserModel) Update(ctx context.Context, newData *TAdminUser) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, tAdminUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Username, newData.Password, newData.Nickname, newData.Avatar, newData.Email, newData.Phone, newData.Status)
	return err
}

func (m *defaultTAdminUserModel) tableName() string {
	return m.table
}
