// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: auth.rpc.proto

package authclient

import (
	"context"

	"bookstore/rpc/auth/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq     = auth.LoginReq
	LoginResp    = auth.LoginResp
	RegisterReq  = auth.RegisterReq
	RegisterResp = auth.RegisterResp

	Auth interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	}

	defaultAuth struct {
		cli zrpc.Client
	}
)

func NewAuth(cli zrpc.Client) Auth {
	return &defaultAuth{
		cli: cli,
	}
}

func (m *defaultAuth) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultAuth) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}
