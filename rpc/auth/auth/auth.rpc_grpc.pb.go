// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: auth.rpc.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminAuthService_Login_FullMethodName          = "/auth.AdminAuthService/Login"
	AdminAuthService_Register_FullMethodName       = "/auth.AdminAuthService/Register"
	AdminAuthService_PermissionList_FullMethodName = "/auth.AdminAuthService/PermissionList"
	AdminAuthService_AddRole_FullMethodName        = "/auth.AdminAuthService/AddRole"
	AdminAuthService_UpdateRole_FullMethodName     = "/auth.AdminAuthService/UpdateRole"
	AdminAuthService_RoleList_FullMethodName       = "/auth.AdminAuthService/RoleList"
	AdminAuthService_GetRoleInfo_FullMethodName    = "/auth.AdminAuthService/GetRoleInfo"
	AdminAuthService_DeleteRole_FullMethodName     = "/auth.AdminAuthService/DeleteRole"
)

// AdminAuthServiceClient is the client API for AdminAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAuthServiceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	PermissionList(ctx context.Context, in *PermissionListReq, opts ...grpc.CallOption) (*PermissionListResp, error)
	AddRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Empty, error)
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Empty, error)
	RoleList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*RoleListResp, error)
	GetRoleInfo(ctx context.Context, in *RoleInfoReq, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *RoleInfoReq, opts ...grpc.CallOption) (*Empty, error)
}

type adminAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAuthServiceClient(cc grpc.ClientConnInterface) AdminAuthServiceClient {
	return &adminAuthServiceClient{cc}
}

func (c *adminAuthServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AdminAuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, AdminAuthService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) PermissionList(ctx context.Context, in *PermissionListReq, opts ...grpc.CallOption) (*PermissionListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionListResp)
	err := c.cc.Invoke(ctx, AdminAuthService_PermissionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) AddRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdminAuthService_AddRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdminAuthService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) RoleList(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleListResp)
	err := c.cc.Invoke(ctx, AdminAuthService_RoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) GetRoleInfo(ctx context.Context, in *RoleInfoReq, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, AdminAuthService_GetRoleInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) DeleteRole(ctx context.Context, in *RoleInfoReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdminAuthService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAuthServiceServer is the server API for AdminAuthService service.
// All implementations must embed UnimplementedAdminAuthServiceServer
// for forward compatibility.
type AdminAuthServiceServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	PermissionList(context.Context, *PermissionListReq) (*PermissionListResp, error)
	AddRole(context.Context, *Role) (*Empty, error)
	UpdateRole(context.Context, *Role) (*Empty, error)
	RoleList(context.Context, *PageReq) (*RoleListResp, error)
	GetRoleInfo(context.Context, *RoleInfoReq) (*Role, error)
	DeleteRole(context.Context, *RoleInfoReq) (*Empty, error)
	mustEmbedUnimplementedAdminAuthServiceServer()
}

// UnimplementedAdminAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminAuthServiceServer struct{}

func (UnimplementedAdminAuthServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminAuthServiceServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAdminAuthServiceServer) PermissionList(context.Context, *PermissionListReq) (*PermissionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionList not implemented")
}
func (UnimplementedAdminAuthServiceServer) AddRole(context.Context, *Role) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedAdminAuthServiceServer) UpdateRole(context.Context, *Role) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAdminAuthServiceServer) RoleList(context.Context, *PageReq) (*RoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedAdminAuthServiceServer) GetRoleInfo(context.Context, *RoleInfoReq) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleInfo not implemented")
}
func (UnimplementedAdminAuthServiceServer) DeleteRole(context.Context, *RoleInfoReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAdminAuthServiceServer) mustEmbedUnimplementedAdminAuthServiceServer() {}
func (UnimplementedAdminAuthServiceServer) testEmbeddedByValue()                          {}

// UnsafeAdminAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAuthServiceServer will
// result in compilation errors.
type UnsafeAdminAuthServiceServer interface {
	mustEmbedUnimplementedAdminAuthServiceServer()
}

func RegisterAdminAuthServiceServer(s grpc.ServiceRegistrar, srv AdminAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminAuthService_ServiceDesc, srv)
}

func _AdminAuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_PermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).PermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_PermissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).PermissionList(ctx, req.(*PermissionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).AddRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_RoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).RoleList(ctx, req.(*PageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_GetRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).GetRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_GetRoleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).GetRoleInfo(ctx, req.(*RoleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).DeleteRole(ctx, req.(*RoleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminAuthService_ServiceDesc is the grpc.ServiceDesc for AdminAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AdminAuthService",
	HandlerType: (*AdminAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AdminAuthService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AdminAuthService_Register_Handler,
		},
		{
			MethodName: "PermissionList",
			Handler:    _AdminAuthService_PermissionList_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _AdminAuthService_AddRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AdminAuthService_UpdateRole_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _AdminAuthService_RoleList_Handler,
		},
		{
			MethodName: "GetRoleInfo",
			Handler:    _AdminAuthService_GetRoleInfo_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AdminAuthService_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.rpc.proto",
}

const (
	ApiAuthService_Login_FullMethodName    = "/auth.ApiAuthService/Login"
	ApiAuthService_Register_FullMethodName = "/auth.ApiAuthService/Register"
)

// ApiAuthServiceClient is the client API for ApiAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiAuthServiceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
}

type apiAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiAuthServiceClient(cc grpc.ClientConnInterface) ApiAuthServiceClient {
	return &apiAuthServiceClient{cc}
}

func (c *apiAuthServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, ApiAuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiAuthServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, ApiAuthService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiAuthServiceServer is the server API for ApiAuthService service.
// All implementations must embed UnimplementedApiAuthServiceServer
// for forward compatibility.
type ApiAuthServiceServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	mustEmbedUnimplementedApiAuthServiceServer()
}

// UnimplementedApiAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiAuthServiceServer struct{}

func (UnimplementedApiAuthServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedApiAuthServiceServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedApiAuthServiceServer) mustEmbedUnimplementedApiAuthServiceServer() {}
func (UnimplementedApiAuthServiceServer) testEmbeddedByValue()                        {}

// UnsafeApiAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiAuthServiceServer will
// result in compilation errors.
type UnsafeApiAuthServiceServer interface {
	mustEmbedUnimplementedApiAuthServiceServer()
}

func RegisterApiAuthServiceServer(s grpc.ServiceRegistrar, srv ApiAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedApiAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiAuthService_ServiceDesc, srv)
}

func _ApiAuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiAuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiAuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiAuthServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiAuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiAuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiAuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiAuthServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiAuthService_ServiceDesc is the grpc.ServiceDesc for ApiAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.ApiAuthService",
	HandlerType: (*ApiAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ApiAuthService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ApiAuthService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.rpc.proto",
}
