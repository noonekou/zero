// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tApisFieldNames          = builder.RawFieldNames(&TApis{}, true)
	tApisRows                = strings.Join(tApisFieldNames, ",")
	tApisRowsExpectAutoSet   = strings.Join(stringx.Remove(tApisFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tApisRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tApisFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	tApisModel interface {
		Insert(ctx context.Context, data *TApis) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TApis, error)
		FindOneByCode(ctx context.Context, code int64) (*TApis, error)
		FindOneByMethodAndPath(ctx context.Context, method, path string) (*TApis, error)
		Update(ctx context.Context, data *TApis) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTApisModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TApis struct {
		Id          int64          `db:"id"`          // 接口ID
		Code        int64          `db:"code"`        // 接口编码
		Method      string         `db:"method"`      // 方法名
		Path        string         `db:"path"`        // 路径
		Description sql.NullString `db:"description"` // 接口描述
		CreatedAt   time.Time      `db:"created_at"`  // 创建时间
		UpdatedAt   time.Time      `db:"updated_at"`  // 更新时间
	}
)

func newTApisModel(conn sqlx.SqlConn) *defaultTApisModel {
	return &defaultTApisModel{
		conn:  conn,
		table: `"public"."t_apis"`,
	}
}

func (m *defaultTApisModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTApisModel) FindOne(ctx context.Context, id int64) (*TApis, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tApisRows, m.table)
	var resp TApis
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTApisModel) FindOneByCode(ctx context.Context, code int64) (*TApis, error) {
	var resp TApis
	query := fmt.Sprintf("select %s from %s where code = $1 limit 1", tApisRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, code)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTApisModel) FindOneByMethodAndPath(ctx context.Context, method, path string) (*TApis, error) {
	var resp TApis
	query := fmt.Sprintf("select %s from %s where method = $1 and path = $2 limit 1", tApisRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, method, path)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTApisModel) Insert(ctx context.Context, data *TApis) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, tApisRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Code, data.Method, data.Path, data.Description)
	return ret, err
}

func (m *defaultTApisModel) Update(ctx context.Context, newData *TApis) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, tApisRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Code, newData.Method, newData.Path, newData.Description)
	return err
}

func (m *defaultTApisModel) tableName() string {
	return m.table
}
