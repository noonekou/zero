// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tApiPermissionFieldNames          = builder.RawFieldNames(&TApiPermission{}, true)
	tApiPermissionRows                = strings.Join(tApiPermissionFieldNames, ",")
	tApiPermissionRowsExpectAutoSet   = strings.Join(stringx.Remove(tApiPermissionFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tApiPermissionRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tApiPermissionFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	tApiPermissionModel interface {
		Insert(ctx context.Context, data *TApiPermission) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TApiPermission, error)
		Update(ctx context.Context, data *TApiPermission) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTApiPermissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TApiPermission struct {
		Id             int64     `db:"id"`              // 接口权限ID
		ApiCode        int64     `db:"api_code"`        // 接口编码
		PermissionName string    `db:"permission_name"` // 权限名
		CreatedAt      time.Time `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time `db:"updated_at"`      // 更新时间
	}
)

func newTApiPermissionModel(conn sqlx.SqlConn) *defaultTApiPermissionModel {
	return &defaultTApiPermissionModel{
		conn:  conn,
		table: `"public"."t_api_permission"`,
	}
}

func (m *defaultTApiPermissionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTApiPermissionModel) FindOne(ctx context.Context, id int64) (*TApiPermission, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tApiPermissionRows, m.table)
	var resp TApiPermission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTApiPermissionModel) Insert(ctx context.Context, data *TApiPermission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, tApiPermissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ApiCode, data.PermissionName)
	return ret, err
}

func (m *defaultTApiPermissionModel) Update(ctx context.Context, data *TApiPermission) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, tApiPermissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.ApiCode, data.PermissionName)
	return err
}

func (m *defaultTApiPermissionModel) tableName() string {
	return m.table
}
