// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tResourceFieldNames          = builder.RawFieldNames(&TResource{}, true)
	tResourceRows                = strings.Join(tResourceFieldNames, ",")
	tResourceRowsExpectAutoSet   = strings.Join(stringx.Remove(tResourceFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tResourceRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tResourceFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	tResourceModel interface {
		Insert(ctx context.Context, data *TResource) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TResource, error)
		FindOneByCode(ctx context.Context, code int64) (*TResource, error)
		FindOneByName(ctx context.Context, name string) (*TResource, error)
		FindAll(ctx context.Context) ([]TResource, error)
		Update(ctx context.Context, data *TResource) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTResourceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TResource struct {
		Id          int64     `db:"id"`          // 资源ID
		Code        int64     `db:"code"`        // 资源编码
		Name        string    `db:"name"`        // 资源名
		ParentCode  int64     `db:"parent_code"` // 父资源编码
		Description string    `db:"description"` // 资源描述
		CreatedAt   time.Time `db:"created_at"`  // 创建时间
		UpdatedAt   time.Time `db:"updated_at"`  // 更新时间
	}
)

func newTResourceModel(conn sqlx.SqlConn) *defaultTResourceModel {
	return &defaultTResourceModel{
		conn:  conn,
		table: `"public"."t_resource"`,
	}
}

func (m *defaultTResourceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTResourceModel) FindOne(ctx context.Context, id int64) (*TResource, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tResourceRows, m.table)
	var resp TResource
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTResourceModel) FindOneByCode(ctx context.Context, code int64) (*TResource, error) {
	var resp TResource
	query := fmt.Sprintf("select %s from %s where code = $1 limit 1", tResourceRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, code)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTResourceModel) FindOneByName(ctx context.Context, name string) (*TResource, error) {
	var resp TResource
	query := fmt.Sprintf("select %s from %s where name = $1 limit 1", tResourceRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTResourceModel) FindAll(ctx context.Context) ([]TResource, error) {
	query := fmt.Sprintf("select %s from %s", tResourceRows, m.table)
	var resp []TResource
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return make([]TResource, 0), nil
	default:
		return nil, err
	}
}

func (m *defaultTResourceModel) Insert(ctx context.Context, data *TResource) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, tResourceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Code, data.Name, data.ParentCode, data.Description)
	return ret, err
}

func (m *defaultTResourceModel) Update(ctx context.Context, newData *TResource) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, tResourceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Code, newData.Name, newData.ParentCode, newData.Description)
	return err
}

func (m *defaultTResourceModel) tableName() string {
	return m.table
}
