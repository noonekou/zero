// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tPermissionFieldNames          = builder.RawFieldNames(&TPermission{}, true)
	tPermissionRows                = strings.Join(tPermissionFieldNames, ",")
	tPermissionRowsExpectAutoSet   = strings.Join(stringx.Remove(tPermissionFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tPermissionRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tPermissionFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	tPermissionModel interface {
		Insert(ctx context.Context, data *TPermission) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TPermission, error)
		FindOneByName(ctx context.Context, name string) (*TPermission, error)
		Update(ctx context.Context, data *TPermission) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTPermissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TPermission struct {
		Id           int64          `db:"id"`            // 权限ID
		Name         string         `db:"name"`          // 权限名
		ResourceName string         `db:"resource_name"` // 资源名
		Action       string         `db:"action"`        // 操作类型
		Description  sql.NullString `db:"description"`   // 权限描述
		CreatedAt    time.Time      `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time      `db:"updated_at"`    // 更新时间
	}
)

func newTPermissionModel(conn sqlx.SqlConn) *defaultTPermissionModel {
	return &defaultTPermissionModel{
		conn:  conn,
		table: `"public"."t_permission"`,
	}
}

func (m *defaultTPermissionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTPermissionModel) FindOne(ctx context.Context, id int64) (*TPermission, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tPermissionRows, m.table)
	var resp TPermission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTPermissionModel) FindOneByName(ctx context.Context, name string) (*TPermission, error) {
	var resp TPermission
	query := fmt.Sprintf("select %s from %s where name = $1 limit 1", tPermissionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTPermissionModel) Insert(ctx context.Context, data *TPermission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, tPermissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.ResourceName, data.Action, data.Description)
	return ret, err
}

func (m *defaultTPermissionModel) Update(ctx context.Context, newData *TPermission) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, tPermissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Name, newData.ResourceName, newData.Action, newData.Description)
	return err
}

func (m *defaultTPermissionModel) tableName() string {
	return m.table
}
