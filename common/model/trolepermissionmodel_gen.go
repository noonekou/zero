// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tRolePermissionFieldNames          = builder.RawFieldNames(&TRolePermission{}, true)
	tRolePermissionRows                = strings.Join(tRolePermissionFieldNames, ",")
	tRolePermissionRowsExpectAutoSet   = strings.Join(stringx.Remove(tRolePermissionFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tRolePermissionRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tRolePermissionFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	tRolePermissionModel interface {
		Insert(ctx context.Context, data *TRolePermission) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TRolePermission, error)
		FindOneByRoleNamePermissionName(ctx context.Context, roleName string, permissionName string) (*TRolePermission, error)
		FindPermissionNameByUserId(ctx context.Context, userId int64) ([]string, error)
		Update(ctx context.Context, data *TRolePermission) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTRolePermissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TRolePermission struct {
		Id             int64     `db:"id"`              // 角色权限ID
		RoleName       string    `db:"role_name"`       // 角色名
		PermissionName string    `db:"permission_name"` // 权限名
		CreatedAt      time.Time `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time `db:"updated_at"`      // 更新时间
	}
)

func newTRolePermissionModel(conn sqlx.SqlConn) *defaultTRolePermissionModel {
	return &defaultTRolePermissionModel{
		conn:  conn,
		table: `"public"."t_role_permission"`,
	}
}

func (m *defaultTRolePermissionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTRolePermissionModel) FindOne(ctx context.Context, id int64) (*TRolePermission, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tRolePermissionRows, m.table)
	var resp TRolePermission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTRolePermissionModel) FindOneByRoleNamePermissionName(ctx context.Context, roleName string, permissionName string) (*TRolePermission, error) {
	var resp TRolePermission
	query := fmt.Sprintf("select %s from %s where role_name = $1 and permission_name = $2 limit 1", tRolePermissionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, roleName, permissionName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTRolePermissionModel) FindPermissionNameByUserId(ctx context.Context, userId int64) ([]string, error) {
	query := fmt.Sprintf("select permission_name from t_admin_user_role inner join t_role on user_id = $1 and t_role.id = role_id inner join t_role_permission on name = role_name")
	var resp []string
	err := m.conn.QueryRowsCtx(ctx, &resp, query, userId)

	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTRolePermissionModel) Insert(ctx context.Context, data *TRolePermission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, tRolePermissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleName, data.PermissionName)
	return ret, err
}

func (m *defaultTRolePermissionModel) Update(ctx context.Context, newData *TRolePermission) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, tRolePermissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.RoleName, newData.PermissionName)
	return err
}

func (m *defaultTRolePermissionModel) tableName() string {
	return m.table
}
