syntax = "v1"

type (
	PageReq {
		page     int64 `form:"page"`
		pageSize int64 `form:"pageSize"`
	}
)

type UserInfo {
	Id        int64  `json:"id"`
	UserName  string `json:"username"`
	NickName  string `json:"nickname"`
	Avatar    string `json:"avatar"`
	Email     string `json:"email"`
	Phone     string `json:"phone"`
	Status    int    `json:"status"`
	CreatedAt int64  `json:"created_at"`
	UpdatedAt int64  `json:"updated_at"`
}

type (
	LoginReq {
		username string `json:"username"`
		password string `json:"password"`
	}
	LoginResp {
		Token string `json:"token"`
	}
	RegisterReq {
		username         string `json:"username"`
		password         string `json:"password"`
		confirm_password string `json:"confirm_password"`
	}
	RegisterResp {
		Token string `json:"token"`
	}
)

type Permission {
	Id          int64        `json:"id"` // 权限ID
	Code        int          `json:"code"` // 资源编码
	Description string       `json:"description"` // 权限描述
	ParentCode  int          `json:"parent_code"` // 父级资源编码
	Children    []Permission `json:"children"` // 子资源
	CreatedAt   int64        `json:"created_at"`
	UpdatedAt   int64        `json:"updated_at"`
}

type Role {
	Id          int64        `json:"id"`
	Name        string       `json:"name"`
	Permissions []Permission `json:"permissions"`
	CreatedAt   int64        `json:"created_at"`
	UpdatedAt   int64        `json:"updated_at"`
}

type (
	RoleListResp {
		Total int64  `json:"total"`
		List  []Role `json:"list"`
	}
	RoleInfoReq {
		Id int64 `path:"id"`
	}
)

type (
	GetUserInfoResp {
		UserInfo
	}
)

type (
	UserListResp {
		Total int64      `json:"total"`
		List  []UserInfo `json:"list"`
	}
)

// 定义 HTTP 服务
// @server 语法块主要用于控制对 HTTP 服务生成时 meta 信息，目前支持功能有：
// 1. 路由分组
// 2. 中间件声明
// 3. 路由前缀
// 4. 超时配置
// 5. jwt 鉴权开关
// 所有声明仅对当前 service 中的路由有效
@server (
	// 代表当前 service 代码块下的路由生成代码时都会被放到 login 目录下
	group: auth
	// 定义路由前缀为 "/v1"
	prefix: /v1
)
service admin-api {
	@handler AuthLogin
	post /auth/login (LoginReq) returns (LoginResp)

	@handler AuthRegister
	post /auth/register (RegisterReq) returns (RegisterResp)

	@handler PermissionList
	get /auth/permission/list returns ([]Permission)

	@handler AddRole
	post /auth/role/add (Role) returns (Role)

	@handler UpdateRole
	post /auth/role/update (Role) returns (Role)

	@handler RoleList
	get /auth/role/list (PageReq) returns (RoleListResp)

	@handler GetRoleInfo
	get /auth/role/info (RoleInfoReq) returns (Role)

	@handler DeleteRole
	delete /auth/role/delete (RoleInfoReq)
}

@server (
	group:      user
	middleware: AuthMiddleware,PermissionMiddleware
	prefix:     /v1
)
service admin-api {
	@handler GetUserInfo
	get /user/info returns (GetUserInfoResp)

	@handler UserList
	get /user/list (PageReq) returns (UserListResp)
}

